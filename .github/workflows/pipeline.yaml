name: Build and Deploy Docker Image

permissions:
  contents: write

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: yousofkhaled/eyego-node-app
  TAG: latest
  K8S_MANIFEST_PATH: k8s

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$TAG -f docker/Dockerfile docker/

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.TAG }}

      - name: Push Docker Image
        run: |
          docker push $IMAGE_NAME:$TAG

      - name: Remove Local Docker Image
        run: |
          docker rmi $IMAGE_NAME:$TAG || true

      - name: Update Manifest File with Image Tag
        run: |
          sed -i "s|image: .*$|image: $IMAGE_NAME:$TAG|" $K8S_MANIFEST_PATH/deployment.yaml

      - name: Commit Updated Manifests
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add $K8S_MANIFEST_PATH/deployment.yaml
          git commit -m "Update image tag to $TAG" || echo "No changes to commit"
          git push
        
      - name: Setup SSH Key
        run: |
          echo "$EC2_SSH_KEY" | base64 -d > ec2_key.pem
          chmod 600 ec2_key.pem
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2 Master Node via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd CloudDevOpsProject || git clone https://github.com/Yousofkhaled4/CloudDevOpsProject.git && cd CloudDevOpsProject
            git pull origin main
            kubectl apply -f k8s/
          EOF

